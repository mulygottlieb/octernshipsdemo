/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateOfStoreArgs } from "./CreateOfStoreArgs";
import { UpdateOfStoreArgs } from "./UpdateOfStoreArgs";
import { DeleteOfStoreArgs } from "./DeleteOfStoreArgs";
import { OfStoreCountArgs } from "./OfStoreCountArgs";
import { OfStoreFindManyArgs } from "./OfStoreFindManyArgs";
import { OfStoreFindUniqueArgs } from "./OfStoreFindUniqueArgs";
import { OfStore } from "./OfStore";
import { Po3aorderFindManyArgs } from "../../po3aorder/base/Po3aorderFindManyArgs";
import { Po3aorder } from "../../po3aorder/base/Po3aorder";
import { OfStoreService } from "../ofStore.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OfStore)
export class OfStoreResolverBase {
  constructor(
    protected readonly service: OfStoreService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OfStore",
    action: "read",
    possession: "any",
  })
  async _ofStoresMeta(
    @graphql.Args() args: OfStoreCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OfStore])
  @nestAccessControl.UseRoles({
    resource: "OfStore",
    action: "read",
    possession: "any",
  })
  async ofStores(
    @graphql.Args() args: OfStoreFindManyArgs
  ): Promise<OfStore[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OfStore, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OfStore",
    action: "read",
    possession: "own",
  })
  async ofStore(
    @graphql.Args() args: OfStoreFindUniqueArgs
  ): Promise<OfStore | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OfStore)
  @nestAccessControl.UseRoles({
    resource: "OfStore",
    action: "create",
    possession: "any",
  })
  async createOfStore(
    @graphql.Args() args: CreateOfStoreArgs
  ): Promise<OfStore> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OfStore)
  @nestAccessControl.UseRoles({
    resource: "OfStore",
    action: "update",
    possession: "any",
  })
  async updateOfStore(
    @graphql.Args() args: UpdateOfStoreArgs
  ): Promise<OfStore | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OfStore)
  @nestAccessControl.UseRoles({
    resource: "OfStore",
    action: "delete",
    possession: "any",
  })
  async deleteOfStore(
    @graphql.Args() args: DeleteOfStoreArgs
  ): Promise<OfStore | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Po3aorder], { name: "po3aorders" })
  @nestAccessControl.UseRoles({
    resource: "Po3aorder",
    action: "read",
    possession: "any",
  })
  async resolveFieldPo3aorders(
    @graphql.Parent() parent: OfStore,
    @graphql.Args() args: Po3aorderFindManyArgs
  ): Promise<Po3aorder[]> {
    const results = await this.service.findPo3aorders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
