/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePo3aorderArgs } from "./CreatePo3aorderArgs";
import { UpdatePo3aorderArgs } from "./UpdatePo3aorderArgs";
import { DeletePo3aorderArgs } from "./DeletePo3aorderArgs";
import { Po3aorderCountArgs } from "./Po3aorderCountArgs";
import { Po3aorderFindManyArgs } from "./Po3aorderFindManyArgs";
import { Po3aorderFindUniqueArgs } from "./Po3aorderFindUniqueArgs";
import { Po3aorder } from "./Po3aorder";
import { Po3aorderService } from "../po3aorder.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Po3aorder)
export class Po3aorderResolverBase {
  constructor(
    protected readonly service: Po3aorderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Po3aorder",
    action: "read",
    possession: "any",
  })
  async _po3aordersMeta(
    @graphql.Args() args: Po3aorderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Po3aorder])
  @nestAccessControl.UseRoles({
    resource: "Po3aorder",
    action: "read",
    possession: "any",
  })
  async po3aorders(
    @graphql.Args() args: Po3aorderFindManyArgs
  ): Promise<Po3aorder[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Po3aorder, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Po3aorder",
    action: "read",
    possession: "own",
  })
  async po3aorder(
    @graphql.Args() args: Po3aorderFindUniqueArgs
  ): Promise<Po3aorder | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Po3aorder)
  @nestAccessControl.UseRoles({
    resource: "Po3aorder",
    action: "create",
    possession: "any",
  })
  async createPo3aorder(
    @graphql.Args() args: CreatePo3aorderArgs
  ): Promise<Po3aorder> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Po3aorder)
  @nestAccessControl.UseRoles({
    resource: "Po3aorder",
    action: "update",
    possession: "any",
  })
  async updatePo3aorder(
    @graphql.Args() args: UpdatePo3aorderArgs
  ): Promise<Po3aorder | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Po3aorder)
  @nestAccessControl.UseRoles({
    resource: "Po3aorder",
    action: "delete",
    possession: "any",
  })
  async deletePo3aorder(
    @graphql.Args() args: DeletePo3aorderArgs
  ): Promise<Po3aorder | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
